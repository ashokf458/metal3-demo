---
- name: Create image-cache directory
  become: true
  file:
    path: "{{ images_dir }}"
    state: directory

- name: Check if local path exists and copy to the image-cache directory
  when: os_local_image
  block:
  - name: Check if the local image exists
    stat:
      path: "{{ os_local_image }}"
    register: local_image

  - name: Fail if os_local_image is defined but file does not exist
    fail:
      msg: "File {{ os_local_image }} does not exist"
    when: not local_image.stat.exists

  - name: "Set os_image_name to {{ os_local_image | basename }} via os_local_image"
    set_fact:
      os_image_name: "{{ os_local_image | basename }}"

  - name: Copy local image to image-cache directory
    become: true
    ansible.builtin.copy:
      src: "{{ os_local_image }}"
      dest: "{{ images_dir }}/{{ os_image_name }}"

- name: "Set os_image_name to {{ os_image_url | basename | splitext | first }} when not defined via os_local_image"
  when: os_image_name is undefined
  set_fact:
    os_image_name: "{{ os_image_url | basename | splitext | first }}"

- name: Check if OS image exists
  stat:
    path: "{{ images_dir }}/{{ os_image_name }}"
  register: image_path

- name: Download and OS image if it doesn't exist
  when: "not image_path.stat.exists"
  become: true
  block:
  - name: Download OS image
    get_url:
      url: "{{ os_image_url }}"
      dest: "{{ images_dir }}/{{ os_image_url | basename }}"
#      checksum: "{{ image_checksum }}"

  - name: Uncompress downloaded OS image
    command:
      cmd: unxz "{{ os_image_url | basename }}"
      chdir: "{{ images_dir }}"

  - name: Confirm expected image exists
    stat:
      path: "{{ images_dir }}/{{ os_image_name }}"
    register: downloaded_image_path

  - name: Fail if expected os_image_name does not exist
    fail:
      msg: "File {{ images_dir }}/{{ os_image_name }} does not exist"
    when: not downloaded_image_path.stat.exists

  - name: Generate OS image checksum
    command:
      cmd: sha256sum "{{ os_image_name }}"
      chdir: "{{ images_dir }}"
    register: image_checksum

  - name: Write OS image checksum file
    copy:
      content: "{{ image_checksum.stdout }}"
      dest: "{{ images_dir }}/{{ os_image_name }}.sha256"

  - ansible.builtin.debug:
      msg: "Downloaded {{ images_dir }}/{{ os_image_name }}"

- ansible.builtin.debug:
    msg: "Creating images with base-image {{ images_dir }}/{{ os_image_name }}"

- name: Create management and metal3 images with EIB
  import_role:
    name: edge-image-builder
  vars:
    eib_source_image: "{{ images_dir }}/{{ os_image_name }}"

- name: Run image-cache webserver container
  become: true
  containers.podman.podman_container:
    name: image-cache
    image: docker.io/library/httpd:2.4
    volumes:
      - "{{ images_dir }}:/usr/local/apache2/htdocs"
    detach: true
    exposed_ports:
      - 80
    ports:
      - 8080:80
    state: started
    force_restart: true
